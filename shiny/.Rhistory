library("ri2")
table_2.2 <-
data.frame(d = c(1, 0, 0, 0, 0, 0, 1),
y = c(15, 15, 20, 20, 10, 15, 30))
## Declare randomization procedure
declaration <- declare_ra(N = 7, m = 2)
## Conduct Randomization Inference
out <- conduct_ri(y ~ d,
declaration = declaration,
assignment = "d",
sharp_hypothesis = 0,
data = table_2.2)
summary(out)
plot(out)
tidy(out)
permutation_matrix <-
matrix(c(0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0),
ncol = 7)
conduct_ri(y ~d, assignment = "d", data = table_2.2,
permutation_matrix = permutation_matrix)
N <- 100
declaration <- randomizr::declare_ra(N = N, m = 50)
Z <- randomizr::conduct_ra(declaration)
X <- rnorm(N)
Y <- .9 * X + .2 * Z + 1 * X * Z + rnorm(N)
dat <- data.frame(Y, X, Z)
ate_obs <- coef(lm(Y ~ Z, data = dat))[2]
out <-
conduct_ri(
model_1 = Y ~ Z + X,
model_2 = Y ~ Z + X + Z * X,
declaration = declaration,
assignment = "Z",
sharp_hypothesis = ate_obs,
data = dat, sims = 100
)
plot(out)
summary(out)
summary(out, p = "two-tailed")
summary(out, p = "upper")
summary(out, p = "lower")
tidy(out)
N <- 100
declaration <- randomizr::declare_ra(N = N, m = 50)
Z <- randomizr::conduct_ra(declaration)
X <- rnorm(N)
Y <- .9 * X + .2 * Z + rnorm(N)
dat <- data.frame(Y, X, Z)
balance_fun <- function(data) {
f_stat <- summary(lm(Z ~ X, data = data))$f[1]
names(f_stat) <- NULL
return(f_stat)
}
## confirm function works as expected
balance_fun(dat)
out <-
conduct_ri(
test_function = balance_fun,
declaration = declaration,
assignment = "Z",
sharp_hypothesis = 0,
data = dat, sims = 100
)
summary(out)
tidy(out)
getwd()
setwd("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft")
shiny::runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
runApp('G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny')
ui <- fluidPage(
theme = shinytheme("cerulean"),
tags$head(
tags$style(HTML("
/* Set background color */
body {
background-color: #f7f7f7;
}
/* Set font */
body {
font-family: Arial;
font-size: 14px;
}
/* Set navigation bar color */
.navbar {
background-color: #003049;
border-color: #003049;
}
/* Set navigation bar text color */
.navbar-inverse .navbar-nav>li>a {
color: #003049;
}
/* Set tab labels color */
.nav-tabs>li>a {
color: #555;
}
/* Set active tab color */
.nav-tabs>li.active>a,
.nav-tabs>li.active>a:focus,
.nav-tabs>li.active>a:hover {
background-color: #003049;
color: #fff;
}
/* Set text input style */
input[type=text],
input[type=number],
select {
border-radius: 0;
border-color: #ddd;
background-color: #fff;
}
/* Set button style */
.btn-primary {
background-color: #2c3e50;
border-color: #2c3e50;
}
/* Set table style */
table {
border-collapse: collapse;
width: 100%;
}
th, td {
text-align: right;
padding: 6px;
}
th {
font-weight: bold;
background-color: #fff;
}
tr:nth-child(even) {
background-color: #f2f2f2;
}
/* Set icon color */
.fa {
color: #2c3e50;
}
h3 {
color: #E51A4B;
}
"))
source('share_load.R')
source('share_load.R')
getwd()
setwd("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny")
source('share_load.R')
library(readxl)
library(dplyr)
library(writexl)
library(stringr)
library(caret)
library(tidyverse)
library(tidyr)
# Read the data from your Excel files
data <- read_excel("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft/avtoelon data 100_ with link.xlsx")
regions <- read_excel("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft/Regions.xlsx")
# Change column names to ensure they are consistent
colnames(data) <- tolower(colnames(data))
colnames(regions) <- tolower(colnames(regions))
# Join the datasets
result <- left_join(data, regions, by = c("city1" = "cyr"))
# Replace 'city1' values with corresponding 'lat' values
result <- result %>%
mutate(city1 = ifelse(!is.na(lat), lat, city1))
# Remove the 'lat' column and rewrite all data to a new 'result' data frame
result <- result %>%
select(-lat)
data1 <-  result %>%
filter(!is.na(`объем двигателя, л`), !is.na(price1), !is.na(city1), !is.na(fuel_type), !is.na(кузов),
!is.na(пробег), !is.na(`коробка передач`), !is.na(цвет), !is.na(`состояние краски`))
clean <- data1 %>%
filter(price1 > 2000 & price1 < 300000)
split_names <- strsplit(clean$title1_1, " ", fixed = TRUE, perl = TRUE)
brands <- sapply(split_names, `[`, 1)
models <- sapply(split_names, function(x) paste(x[-1], collapse = " "))
clean$id <- 1:nrow(clean)
clean$Brand <- brands
clean$Model <- models
clean<- clean[, c(10,11,19:27,37:38)]
##################### model and body type cleaning part
clean %>% filter(Model == "Kadett") %>%
group_by(кузов) %>%
summarise(count = n(), .groups = 'drop')
table(clean$`коробка передач`)
a <- clean %>% group_by(Model) %>%
summarise(count = n(), .groups = 'drop')
car_counts <- clean %>%
group_by(Model, кузов) %>%
summarise(count = n(), .groups = 'drop')
# # Widen data
car_counts_wide <- car_counts %>%
pivot_wider(names_from = кузов, values_from = count, values_fill = 0)
car_counts_long <- car_counts_wide %>%
pivot_longer(cols = -Model, names_to = "кузов", values_to = "count")
# most frequent type
frequent_body <- car_counts_long %>%
group_by(Model) %>%
summarise(new_body = кузов[which.max(count)], .groups = 'drop')
# Join to the main dataset
cars_with_new_body <- left_join(clean, frequent_body, by = "Model")
cars_new <- cars_with_new_body %>%
mutate(new_transmission = case_when(
`коробка передач` %in% c("Вариатор", "Робот", "Типтроник", "Автомат") ~ "Автомат",
`коробка передач` == "Механика" ~ "Механика",
TRUE ~ `коробка передач`))
cars_motor <- cars_new %>%
group_by(Model, `объем двигателя, л`) %>%
summarise(count = n(), .groups = 'drop')
# most frequent type
frequent_motor <- cars_motor %>%
group_by(Model) %>%
summarise(new_motor_size = `объем двигателя, л`[which.max(count)], .groups = 'drop')
# Join to the main dataset
cars_new1 <- left_join(cars_new, frequent_motor, by = "Model")
cars_dataset <- cars_new1
View(cars_new1)
cars_new1 <- cars_new1[,c(1:3, 5, 7, 9:16)]
View(cars_new1)
cars_dataset <- cars_new1
save(cars_dataset, file = "G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny/cars_dataset.rda")
## load
source('share_load.R')
View(cars_dataset)
View(cars_new)
# Read the data from your Excel files
data <- read_excel("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft/avtoelon data 100_ with link.xlsx")
regions <- read_excel("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft/Regions.xlsx")
View(data)
# Change column names to ensure they are consistent
colnames(data) <- tolower(colnames(data))
colnames(regions) <- tolower(colnames(regions))
# Join the datasets
result <- left_join(data, regions, by = c("city1" = "cyr"))
# Replace 'city1' values with corresponding 'lat' values
result <- result %>%
mutate(city1 = ifelse(!is.na(lat), lat, city1))
# Remove the 'lat' column and rewrite all data to a new 'result' data frame
result <- result %>%
select(-lat)
data1 <-  result %>%
filter(!is.na(`объем двигателя, л`), !is.na(price1), !is.na(city1), !is.na(fuel_type), !is.na(кузов),
!is.na(пробег), !is.na(`коробка передач`), !is.na(цвет), !is.na(`состояние краски`))
clean <- data1 %>%
filter(price1 > 2000 & price1 < 300000)
View(clean)
split_names <- strsplit(clean$title1_1, " ", fixed = TRUE, perl = TRUE)
brands <- sapply(split_names, `[`, 1)
models <- sapply(split_names, function(x) paste(x[-1], collapse = " "))
clean$id <- 1:nrow(clean)
clean$Brand <- brands
clean$Model <- models
View(clean)
##################### model and body type cleaning part
clean %>% filter(Model == "Kadett") %>%
group_by(кузов) %>%
summarise(count = n(), .groups = 'drop')
table(clean$`коробка передач`)
a <- clean %>% group_by(Model) %>%
summarise(count = n(), .groups = 'drop')
car_counts <- clean %>%
group_by(Model, кузов) %>%
summarise(count = n(), .groups = 'drop')
# # Widen data
car_counts_wide <- car_counts %>%
pivot_wider(names_from = кузов, values_from = count, values_fill = 0)
car_counts_long <- car_counts_wide %>%
pivot_longer(cols = -Model, names_to = "кузов", values_to = "count")
# most frequent type
frequent_body <- car_counts_long %>%
group_by(Model) %>%
summarise(new_body = кузов[which.max(count)], .groups = 'drop')
# Join to the main dataset
cars_with_new_body <- left_join(clean, frequent_body, by = "Model")
cars_new <- cars_with_new_body %>%
mutate(new_transmission = case_when(
`коробка передач` %in% c("Вариатор", "Робот", "Типтроник", "Автомат") ~ "Автомат",
`коробка передач` == "Механика" ~ "Механика",
TRUE ~ `коробка передач`))
cars_motor <- cars_new %>%
group_by(Model, `объем двигателя, л`) %>%
summarise(count = n(), .groups = 'drop')
# most frequent type
frequent_motor <- cars_motor %>%
group_by(Model) %>%
summarise(new_motor_size = `объем двигателя, л`[which.max(count)], .groups = 'drop')
# Join to the main dataset
cars_new1 <- left_join(cars_new, frequent_motor, by = "Model")
View(cars_new1)
View(cars_new1)
# Join to the main dataset
cars_new1 <- left_join(cars_new, frequent_motor, by = "Model")
library(readxl)
library(dplyr)
library(writexl)
library(stringr)
library(caret)
library(tidyverse)
library(tidyr)
# Read the data from your Excel files
data <- read_excel("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft/avtoelon data 100_ with link.xlsx")
regions <- read_excel("G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/draft/Regions.xlsx")
########### REGIONS ############
# Change column names to ensure they are consistent
colnames(data) <- tolower(colnames(data))
colnames(regions) <- tolower(colnames(regions))
# Join the datasets
result <- left_join(data, regions, by = c("city1" = "cyr"))
# Replace 'city1' values with corresponding 'lat' values
result <- result %>%
mutate(city1 = ifelse(!is.na(lat), lat, city1))
# Remove the 'lat' column and rewrite all data to a new 'result' data frame
result <- result %>%
select(-lat)
###########################################
data1 <-  result %>%
filter(!is.na(`объем двигателя, л`), !is.na(price1), !is.na(city1), !is.na(fuel_type), !is.na(кузов),
!is.na(пробег), !is.na(`коробка передач`), !is.na(цвет), !is.na(`состояние краски`))
clean <- data1 %>%
filter(price1 > 2000 & price1 < 300000)
split_names <- strsplit(clean$title1_1, " ", fixed = TRUE, perl = TRUE)
brands <- sapply(split_names, `[`, 1)
models <- sapply(split_names, function(x) paste(x[-1], collapse = " "))
clean$id <- 1:nrow(clean)
clean$Brand <- brands
clean$Model <- models
clean<- clean[, c(10,11,19:27,36:38)]
##################### model and body type cleaning part
clean %>% filter(Model == "Kadett") %>%
group_by(кузов) %>%
summarise(count = n(), .groups = 'drop')
table(clean$`коробка передач`)
a <- clean %>% group_by(Model) %>%
summarise(count = n(), .groups = 'drop')
car_counts <- clean %>%
group_by(Model, кузов) %>%
summarise(count = n(), .groups = 'drop')
# # Widen data
car_counts_wide <- car_counts %>%
pivot_wider(names_from = кузов, values_from = count, values_fill = 0)
####long format
car_counts_long <- car_counts_wide %>%
pivot_longer(cols = -Model, names_to = "кузов", values_to = "count")
# most frequent type
frequent_body <- car_counts_long %>%
group_by(Model) %>%
summarise(new_body = кузов[which.max(count)], .groups = 'drop')
# Join to the main dataset
cars_with_new_body <- left_join(clean, frequent_body, by = "Model")
########transmission cleaning part
cars_new <- cars_with_new_body %>%
mutate(new_transmission = case_when(
`коробка передач` %in% c("Вариатор", "Робот", "Типтроник", "Автомат") ~ "Автомат",
`коробка передач` == "Механика" ~ "Механика",
TRUE ~ `коробка передач`))
######motor size cleaning part
cars_motor <- cars_new %>%
group_by(Model, `объем двигателя, л`) %>%
summarise(count = n(), .groups = 'drop')
# most frequent type
frequent_motor <- cars_motor %>%
group_by(Model) %>%
summarise(new_motor_size = `объем двигателя, л`[which.max(count)], .groups = 'drop')
# Join to the main dataset
cars_new1 <- left_join(cars_new, frequent_motor, by = "Model")
View(cars_new1)
cars_new1 <- cars_new1[,c(1:3, 5, 7, 9:17)]
cars_dataset <- cars_new1
save(cars_dataset, file = "G:/Meine Ablage/Data_solutions/Car market/Car_prices_project/shiny/cars_dataset.rda")
## load
source('share_load.R')
View(cars_dataset)
table(cars_dataset$current_time1)
cars_dataset %>%
mutate(current_time1 = as.Date(current_time1),
current_month = month(current_time1))
###3. Price dynamics (haftalik)
cars_dataset -> cars_dataset %>%
mutate(current_time1 = as.Date(current_time1),
current_month = month(current_time1))
###3. Price dynamics (haftalik)
cars_dataset <- cars_dataset %>%
mutate(current_time1 = as.Date(current_time1),
current_month = month(current_time1))
View(cars_dataset)
table(cars_dataset$current_month)
View(cars_dataset)
table(cars_dataset$Brand)
table(cars_dataset$Model)
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet")
table(cars_dataset_chevrolet$Model)
###3. Price dynamics (haftalik)
cars_dataset <- cars_dataset %>%
mutate(current_time1 = as.Date(current_time1),
year_month = format(current_time1, "%Y-%m"))
mean_price <- cars_dataset_chevrolet %>%
group_by(year_month, Model) %>%
summarise(mean_price = mean(price1))
###3. Price dynamics (haftalik)
cars_dataset <- cars_dataset %>%
mutate(current_time1 = as.Date(current_time1),
year_month = format(current_time1, "%Y-%m"))
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet")
mean_price <- cars_dataset_chevrolet %>%
group_by(year_month, Model) %>%
summarise(mean_price = mean(price1))
View(mean_price)
table(cars_dataset_chevrolet$Model)
mean_price <- mean_price %>%
pivot_wider(names_from = Model, values_from = mean_price, values_fill = 0)
View(mean_price)
###3. Price dynamics (haftalik)
cars_dataset <- cars_dataset %>%
mutate(current_time1 = as.Date(current_time1),
year_month = format(current_time1, "%Y-%m"))
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet")
mean_price <- cars_dataset_chevrolet %>%
group_by(year_month, Model) %>%
summarise(mean_price = mean(price1))
View(mean_price)
View(cars_dataset_chevrolet)
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet") %>%
group_by(MOdel) %>%
mutate(n = count())
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet") %>%
group_by(Model) %>%
mutate(n = count())
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet") %>%
group_by(Model) %>%
mutate(freq = n())
View(cars_dataset_chevrolet)
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet") %>%
group_by(Model) %>%
mutate(freq = n()) %>%
filter(freq >= 200)
runApp()
mean_price <- cars_dataset_chevrolet %>%
group_by(year_month, Model) %>%
summarise(mean_price = mean(price1))
table(cars_dataset_chevrolet$Model)
mean_price_wide <- mean_price %>%
pivot_wider(names_from = Model, values_from = mean_price, values_fill = 0)
View(mean_price_wide)
cars_dataset_chevrolet <- cars_dataset %>%
filter(Brand=="Chevrolet") %>%
group_by(Model) %>%
mutate(freq = n()) %>%
filter(freq >= 1000)
mean_price <- cars_dataset_chevrolet %>%
group_by(year_month, Model) %>%
summarise(mean_price = mean(price1))
mean_price_wide <- mean_price %>%
pivot_wider(names_from = Model, values_from = mean_price, values_fill = 0)
table(cars_dataset_chevrolet$Model)
View(mean_price_wide)
mean_price_wide
colnamses(mean_price_wide)
colnames(mean_price_wide)
View(mean_price_wide)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mean_price_wide)
runApp()
View(mean_price_wide)
mean_price_wide <- round(mean_price_wide[ ,c(2:16)],0)
View(mean_price_wide)
mean_price_wide <- mean_price %>%
pivot_wider(names_from = Model, values_from = mean_price, values_fill = 0)
mean_price_wide[ ,2:16] <- round(mean_price_wide[ ,2:16],0)
View(mean_price_wide)
runApp()
colnames(mean_price_wide)
runApp()
runApp()
runApp()
View(mean_price)
mean_price <- cars_dataset_chevrolet %>%
group_by(year_month, Model) %>%
summarise(mean_price = mean(price1)) %>%
ungroup()
View(mean_price)
mean_price_wide <- mean_price %>%
pivot_wider(names_from = Model, values_from = mean_price, values_fill = 0)
mean_price_wide[ ,2:16] <- round(mean_price_wide[ ,2:16],0)
runApp()
View(mean_price_wide)
runApp()
shiny::runApp()
runApp()
