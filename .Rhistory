.navbar {
position: fixed;
width: 100%;
z-index: 100;
}
")),
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML")
getwd()
shiny::runApp('shiny')
##### modeling part
library(randomForest)
library(xgboost)
library(caret)
library(dplyr)
library(tidyverse)
library(e1071)
library(ranger)
library(fst)
library(lubridate)
library(fastDummies)
data_tashkent_imputed <- read.csv("G:/Meine Ablage/Data_solutions/Housing market/Dataset/data_tashkent_imputed.csv")
# Filter data
data_wo_actvref <- subset(data_tashkent_imputed, tv_fac == 0 & airconditioner_fac == 0 & refrigerator_fac == 0)
# Drop columns
data_wo_actvref <- subset(data_wo_actvref, select = -c(tv_fac, refrigerator_fac, airconditioner_fac))
# Calculate 5th and 95th percentiles
p5_wo_actvref <- quantile(data_wo_actvref$price1, 0.05)
p95_wo_actvref <- quantile(data_wo_actvref$price1, 0.95)
# Filter DataFrame
trimmed_data_wo_actvref <- subset(data_wo_actvref, price1 >= p5_wo_actvref & price1 <= p95_wo_actvref)
summary(trimmed_data_wo_actvref$price1)
set.seed(123)
splitIndex <- createDataPartition(trimmed_data_wo_actvref$price1, p = .7, list = FALSE, times = 1)
train_data <- trimmed_data_wo_actvref[splitIndex,]
test_data <- trimmed_data_wo_actvref[-splitIndex,]
glimpse(train_data)
save(train_data, file = "G:/Meine Ablage/Data_solutions/Housing market/Shinyapp/train_data/shiny.rda")
#### train_data sample
shinysample <- train_data[1, ]
save(shinysample, file = "G:/Meine Ablage/Data_solutions/Housing market/Shinyapp/train_data/shiny/train_data.rda")
save(shinysample, file = "G:/Meine Ablage/Data_solutions/Housing market/Shinyapp/shiny/train_data.rda")
View(shinysample)
load("G:/Meine Ablage/Data_solutions/Housing market/Dataset/olx_data_apr22_sep23_clean_wo_dupl.rda")
# Create an empty list to store unique values of each variable
unique_values_list <- list()
# Loop through each column
for(col in names(olx_data_apr22_sep23_clean_wo_dupl)) {
# Get unique values of the column
unique_values <- unique(olx_data_apr22_sep23_clean_wo_dupl[[col]])
# Store the unique values in the list
unique_values_list[[col]] <- unique_values
}
# Loop through each column
for(col in names(data_apr22_sep23_clean_wo_dupl)) {
# Get unique values of the column
unique_values <- unique(data_apr22_sep23_clean_wo_dupl[[col]])
# Store the unique values in the list
unique_values_list[[col]] <- unique_values
}
# Create a new dataset from the list
unique_values_dataset <- as.data.frame(unique_values_list)
View(data_apr22_sep23_clean_wo_dupl)
glimpse(data_apr22_sep23_clean_wo_dupl)
data <- data_apr22_sep23_clean_wo_dupl[, c(2:4, 7:21, 26:49)]
data <- na.omit(data)
### const year: ordered factor variable
data <- data %>%
mutate(construction_year=factor(construction_year,
levels = c("старше 1960", "1960 - 1979", "1980 - 1989",
"1990 - 2000", "2001 - 2010", "2011 - 2014",
"2015", "2016", "2017", "2018", "2019",
"2020", "2021", "2022", "2023"),
ordered = TRUE))
### ceiling_height ordered factor
data <- data %>%
mutate(ceiling_height_rounded = round(ceiling_height, 1),
ceiling_height_category = case_when(
ceiling_height_rounded < 2.7 ~ "до 2.7м",
ceiling_height_rounded > 3.5 ~ "выше 3.5м",
TRUE ~ paste(ceiling_height_rounded, "м")
)) %>%
mutate(ceiling_height_category = factor(ceiling_height_category,
levels = c("до 2.7м", sort(unique(ceiling_height_category[!ceiling_height_category %in% c("до 2.7м", "выше 3.5м")])), "выше 3.5м"),
ordered = TRUE)) %>%
select(-ceiling_height, -ceiling_height_rounded)
## location
data <- data %>%
mutate(location = case_when(
state == "Toshkent shahri" ~ district,
grepl("shahri", district) ~ district,
district == "Nukus" ~ district,
district == "Urganch" ~ district,
district == "Urganch" ~ district,
TRUE ~ state
)) %>%
mutate(location=ifelse(location == "Shayxontohur Tumani", "Shayhontohur Tumani", location)) %>%
mutate(location = as.factor(location))
## month_and_year
data <- data %>%
mutate(month_and_year = as.Date(paste0(month_and_year, "-01"), format = "%m-%Y-%d"),
month_numeric = floor((year(month_and_year) - 1970) * 12 + month(month_and_year) - 1)) %>%
filter(month_numeric!=626 & month_numeric!=632) %>%
select(-month_and_year)
##other character variables
data$ownership <- as.factor(data$ownership)
data$remont <- as.factor(data$remont)
data$sanuzel <- as.factor(data$sanuzel)
data$structure <- as.factor(data$structure)
data$construction_type <- as.factor(data$ownership)
## extracting data for Tashkent
data_tashkent <- data %>%
filter(state=="Toshkent shahri") %>%
select(-state, -district)
data <- data %>%
select(-state, -district)
glimpse(data_tashkent)
# Create an empty list to store unique values of each non-numeric variable
unique_values_list <- list()
# Loop through each column, checking if it's non-numeric
for(col in names(data_tashkent)) {
if(!is.numeric(data_tashkent[[col]])) {
# Get unique values of the non-numeric column
unique_values <- unique(data_tashkent[[col]])
# Store the unique values in the list
unique_values_list[[col]] <- unique_values
}
}
# Create a new dataset from the list
unique_values_dataset <- as.data.frame(unique_values_list, stringsAsFactors = FALSE)
# Create an empty list to store unique values of each non-numeric variable
unique_values_dfs <- list()
# Loop through each column, checking if it's non-numeric
for(col in names(olx_data_apr22_sep23_clean_wo_dupl)) {
if(!is.numeric(olx_data_apr22_sep23_clean_wo_dupl[[col]])) {
# Get unique values of the non-numeric column
unique_values <- unique(olx_data_apr22_sep23_clean_wo_dupl[[col]])
# Create a data frame and store it in the list
unique_values_dfs[[col]] <- data.frame(unique_values)
}
}
# Loop through each column, checking if it's non-numeric
for(col in names(data_tashkent)) {
if(!is.numeric(data_tashkent[[col]])) {
# Get unique values of the non-numeric column
unique_values <- unique(data_tashkent[[col]])
# Create a data frame and store it in the list
unique_values_dfs[[col]] <- data.frame(unique_values)
}
}
View(unique_values_dfs)
unique_values_dfs[["ownership"]]
View(unique_values_dfs)
save(unique_values_dfs, file = "G:/Meine Ablage/Data_solutions/Housing market/Shinyapp/shiny/unique_values_of_categorical_vars.RData")
glimpse(data_tashkent)
table(data_tashkent$commission)
summary(data_tashkent$flfloor_number)
summary(data_tashkent$floor_number)
summary(data_tashkent$n_storeys)
summary(data_tashkent$total_area_m2)
runApp('shiny')
runApp('shiny')
getwd()
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
data$construction_type <- as.factor(data$construction_type)
load("G:/Meine Ablage/Data_solutions/Housing market/Dataset/olx_data_apr22_sep23_clean_wo_dupl.rda")
data <- data_apr22_sep23_clean_wo_dupl[, c(2:4, 7:21, 26:49)]
data <- na.omit(data)
### const year: ordered factor variable
data <- data %>%
mutate(construction_year=factor(construction_year,
levels = c("старше 1960", "1960 - 1979", "1980 - 1989",
"1990 - 2000", "2001 - 2010", "2011 - 2014",
"2015", "2016", "2017", "2018", "2019",
"2020", "2021", "2022", "2023"),
ordered = TRUE))
### ceiling_height ordered factor
data <- data %>%
mutate(ceiling_height_rounded = round(ceiling_height, 1),
ceiling_height_category = case_when(
ceiling_height_rounded < 2.7 ~ "до 2.7м",
ceiling_height_rounded > 3.5 ~ "выше 3.5м",
TRUE ~ paste(ceiling_height_rounded, "м")
)) %>%
mutate(ceiling_height_category = factor(ceiling_height_category,
levels = c("до 2.7м", sort(unique(ceiling_height_category[!ceiling_height_category %in% c("до 2.7м", "выше 3.5м")])), "выше 3.5м"),
ordered = TRUE)) %>%
select(-ceiling_height, -ceiling_height_rounded)
## location
data <- data %>%
mutate(location = case_when(
state == "Toshkent shahri" ~ district,
grepl("shahri", district) ~ district,
district == "Nukus" ~ district,
district == "Urganch" ~ district,
district == "Urganch" ~ district,
TRUE ~ state
)) %>%
mutate(location=ifelse(location == "Shayxontohur Tumani", "Shayhontohur Tumani", location)) %>%
mutate(location = as.factor(location))
## month_and_year
data <- data %>%
mutate(month_and_year = as.Date(paste0(month_and_year, "-01"), format = "%m-%Y-%d"),
month_numeric = floor((year(month_and_year) - 1970) * 12 + month(month_and_year) - 1)) %>%
filter(month_numeric!=626 & month_numeric!=632) %>%
select(-month_and_year)
##other character variables
data$ownership <- as.factor(data$ownership)
data$remont <- as.factor(data$remont)
data$sanuzel <- as.factor(data$sanuzel)
data$structure <- as.factor(data$structure)
data$construction_type <- as.factor(data$construction_type)
## extracting data for Tashkent
data_tashkent <- data %>%
filter(state=="Toshkent shahri") %>%
select(-state, -district)
data <- data %>%
select(-state, -district)
# Create an empty list to store unique values of each non-numeric variable
unique_values_dfs <- list()
# Loop through each column, checking if it's non-numeric
for(col in names(data_tashkent)) {
if(!is.numeric(data_tashkent[[col]])) {
# Get unique values of the non-numeric column
unique_values <- unique(data_tashkent[[col]])
# Create a data frame and store it in the list
unique_values_dfs[[col]] <- data.frame(unique_values)
}
}
save(unique_values_dfs, file = "G:/Meine Ablage/Data_solutions/Housing market/Shinyapp/shiny/unique_values_of_categorical_vars.RData")
runApp('shiny')
View(shinysample)
table(data_apr22_sep23_clean_wo_dupl$top)
table(data_apr22_sep23_clean_wo_dupl$comission)
table(data_apr22_sep23_clean_wo_dupl$commission)
## for month variable
current_date <- Sys.Date()
month_numeric <- floor((year(current_date) - 1970) * 12 + month(current_date) - 1)
View(data_apr22_sep23_clean_wo_dupl)
View(shinysample)
load("G:/Meine Ablage/Data_solutions/Housing market/Dataset/olx_data_apr22_sep23_clean_wo_dupl.rda")
data <- data_apr22_sep23_clean_wo_dupl[, c(3:4, 7, 9:21, 26:49)]
data <- na.omit(data)
### const year: ordered factor variable
data <- data %>%
mutate(construction_year=factor(construction_year,
levels = c("старше 1960", "1960 - 1979", "1980 - 1989",
"1990 - 2000", "2001 - 2010", "2011 - 2014",
"2015", "2016", "2017", "2018", "2019",
"2020", "2021", "2022", "2023"),
ordered = TRUE))
### ceiling_height ordered factor
data <- data %>%
mutate(ceiling_height_rounded = round(ceiling_height, 1),
ceiling_height_category = case_when(
ceiling_height_rounded < 2.7 ~ "до 2.7 м",
ceiling_height_rounded > 3.5 ~ "выше 3.5 м",
TRUE ~ paste(ceiling_height_rounded, "м")
)) %>%
select(-ceiling_height, -ceiling_height_rounded)
## location
data <- data %>%
mutate(location = case_when(
state == "Toshkent shahri" ~ district,
grepl("shahri", district) ~ district,
district == "Nukus" ~ district,
district == "Urganch" ~ district,
district == "Urganch" ~ district,
TRUE ~ state
)) %>%
mutate(location=ifelse(location == "Shayxontohur Tumani", "Shayhontohur Tumani", location)) %>%
mutate(location = as.factor(location))
## month_and_year
data <- data %>%
mutate(month_and_year = as.Date(paste0(month_and_year, "-01"), format = "%m-%Y-%d"),
month_numeric = floor((year(month_and_year) - 1970) * 12 + month(month_and_year) - 1)) %>%
filter(month_numeric!=626 & month_numeric!=632) %>%
select(-month_and_year)
##other character variables
data$ownership <- as.factor(data$ownership)
data$remont <- as.factor(data$remont)
data$sanuzel <- as.factor(data$sanuzel)
data$structure <- as.factor(data$structure)
data$construction_type <- as.factor(data$construction_type)
## extracting data for Tashkent
data_tashkent <- data %>%
filter(state=="Toshkent shahri") %>%
select(-state, -district)
data <- data %>%
select(-state, -district)
# Create an empty list to store unique values of each non-numeric variable
unique_values_dfs <- list()
# Loop through each column, checking if it's non-numeric
for(col in names(data_tashkent)) {
if(!is.numeric(data_tashkent[[col]])) {
# Get unique values of the non-numeric column
unique_values <- unique(data_tashkent[[col]])
# Create a data frame and store it in the list
unique_values_dfs[[col]] <- data.frame(unique_values)
}
}
save(unique_values_dfs, file = "G:/Meine Ablage/Data_solutions/Housing market/Shinyapp/shiny/unique_values_of_categorical_vars.RData")
View(shinysample)
runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp()
runApp()
runApp('shiny')
View(rf_best_trimmed_wo_actvref_50trees)
View(rf_best_trimmed_wo_actvref_50trees)
View(shinysample)
runApp('shiny')
View(new_flat)
View(new_flat)
selected_other_features <- input$facilities
selected_other_features <- input$neighborhood
for (feature in neighborhood_and_facilities) {
new_flat[[feature]] <- ifelse(feature %in% selected_other_features, 1, 0)
}
## apply one-hot encoding
# Select categorical columns
categorical_cols <- sapply(new_flat, is.factor) | sapply(new_flat, is.character)
# Apply one-hot encoding to categorical columns
new_flat_encoded <- new_flat %>%
mutate(across(where(is.factor), as.character)) %>% # Convert factors to characters
model.matrix(~ . - 1, data = .) %>%
as.data.frame()
load("unique_values_of_categorical_vars.RData")
unique_locations <- unique_values_dfs[["location"]]
# Create new columns
for(loc in unique_locations) {
column_name <- paste("location", loc, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
View(new_flat)
column_name <- paste("location", loc, sep = "_")
# Create new columns
for(loc in unique_locations) {
column_name <- paste("location", loc, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
print(unique_locations)
for(loc in unique_locations) {
# Replace spaces with underscores in loc
loc_clean <- gsub(" ", "_", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
# Create new columns
for(loc in unique_locations) {
# Replace spaces with underscores in loc
loc_clean <- gsub(" ", ".", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
# Create new columns
for(loc in unique_locations) {
print(loc)
loc_clean <- gsub(" ", ".", loc)
# rest of the code...
}
unique_locations <- unique_values_dfs[["location"]][["unique_values"]]
unique_locations <- unique_values_dfs[["location"]][, 1]        # Create new columns
for(loc in unique_locations) {
loc_char <- as.character(loc)
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
unique_locations <- unique(unique_values_dfs[["location"]])
for(loc in unique_locations) {
loc_char <- as.character(loc)
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
class(unique_locations)
loc_clean <- gsub(" ", ".", loc_char)
for(loc in unique_locations) {
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
library(dplyr)
for(loc in unique_locations) {
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
View(new_flat)
for(loc in unique_locations) {
print(paste("Original Location:", loc))
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
loc
for(loc in unique_locations) {
print(paste("Original Location:", "loc"))
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
runApp('shiny')
selected_other_features <- input$facilities
selected_other_features <- input$neighborhood
for(loc in unique_locations) {
# Replace spaces with underscores in loc
loc_clean <- gsub(" ", "_", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
unique_locations <- unique_values_dfs[["location"]]
for(loc in unique_locations) {
print(paste("Original Location:", loc))
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
for (loc in unique_locations) {
print(paste("Original Location:", loc))
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
for (loc in unique_locations){
print(paste("Original Location:", loc))
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
for (loc in unique_locations){
loc_clean <- gsub(" ", ".", loc_char)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
for (loc in unique_locations){
loc_clean <- gsub(" ", ".", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
gsub(" ", ".", loc)
loc_clean <- gsub(" ", ".", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
View(new_flat)
for (loc in unique_locations){
tmp <- get(loc)
loc_clean <- gsub(" ", ".", tmp)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
create_location_column <- function(loc, data_frame) {
loc_clean <- gsub(" ", ".", loc)
column_name <- paste("location", loc_clean, sep = "_")
data_frame[[column_name]] <- ifelse(data_frame$location == loc, 1, 0)
return(data_frame)
}
for(loc in unique_locations) {
new_flat <- create_location_column(loc, new_flat)
}
for (loc in unique_locations){
loc_clean <- gsub(" ", ".", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
}
for(loc in unique_locations) {
new_flat <- create_location_column(loc, new_flat)
}
create_location_column <- function(loc, new_flat) {
loc_clean <- gsub(" ", ".", loc)
column_name <- paste("location", loc_clean, sep = "_")
new_flat[[column_name]] <- ifelse(new_flat$location == loc, 1, 0)
return(new_flat)
}
for(loc in unique_locations) {
new_flat <- create_location_column(loc, new_flat)
}
for (loc in unique_locations){
print(loc)
}
for (loc in unique_locations){
loc
}
for (loc in 1:10){
loc
}
for (x in 1:5) {
print(x)
}
for (x in 1:5){
print(x)
}
for(x in 1:5){
print(x)
}
for(x in 1:5) {
print(x)
}
x
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
